name: CI/CD Pipeline

on:
  push:
    branches: ['**']
    tags: ['v*']
  pull_request:
    branches: ['**']

jobs:
  lint-and-test:
    name: üîç Lint, Format & Test
    runs-on: ubuntu-latest

    steps:
      - name: ‚¨áÔ∏è Checkout code
        uses: actions/checkout@v4

      - name: ü§ì Read .nvmrc
        id: nvm
        run: echo "NODE_VERSION=$(cat .nvmrc)" >> $GITHUB_OUTPUT

      - name: üì¶ Install PNPM
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: üü¢ Setup Node.js ${{ steps.nvm.outputs.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ steps.nvm.outputs.NODE_VERSION }}
          cache: 'pnpm'

      - name: üì• Install dependencies
        run: pnpm install

      - name: üíÖ Lint
        run: pnpm lint

      - name: üßº Format
        run: pnpm format

      - name: üß™ Unit tests
        run: pnpm test:unit

      - name: üöÄ E2E tests
        run: pnpm test:e2e

      - name: üèóÔ∏è Build
        run: pnpm build

  docker-build-staging:
    name: üê≥ Build & Push Docker image (staging)
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: ‚¨áÔ∏è Checkout code
        uses: actions/checkout@v4

      - name: ü§ì Read .nvmrc
        id: nvm
        run: echo "NODE_VERSION=$(cat .nvmrc)" >> $GITHUB_OUTPUT

      - name: üê≥ Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: üîê Log in to Private Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.PRIVATE_REGISTRY_URL }}
          username: ${{ secrets.PRIVATE_REGISTRY_USERNAME }}
          password: ${{ secrets.PRIVATE_REGISTRY_PASSWORD }}

      - name: üì¶ Extract metadata (staging)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.PRIVATE_REGISTRY_URL }}/${{ github.repository_owner }}/${{ github.event.repository.name }}
          tags: |
            type=raw,value=latest
          labels: |
            org.opencontainers.image.version=staging
            org.opencontainers.image.source=${{ github.repositoryUrl }}

      - name: üîß Build & Push Docker image (staging)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            NODE_VERSION=${{ steps.nvm.outputs.NODE_VERSION }}

  docker-build-production:
    name: üê≥ Build & Push Docker image (production)
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: ‚¨áÔ∏è Checkout code
        uses: actions/checkout@v4

      - name: ü§ì Read .nvmrc
        id: nvm
        run: echo "NODE_VERSION=$(cat .nvmrc)" >> $GITHUB_OUTPUT

      - name: üê≥ Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: üîê Log in to Private Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.PRIVATE_REGISTRY_URL }}
          username: ${{ secrets.PRIVATE_REGISTRY_USERNAME }}
          password: ${{ secrets.PRIVATE_REGISTRY_PASSWORD }}

      - name: üì¶ Extract metadata (release tag)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.PRIVATE_REGISTRY_URL }}/${{ github.repository_owner }}/${{ github.event.repository.name }}
          tags: |
            type=ref,event=tag
          labels: |
            org.opencontainers.image.version=${{ github.ref_name }}
            org.opencontainers.image.source=${{ github.repositoryUrl }}

      - name: üîß Build & Push Docker image (release tag)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            NODE_VERSION=${{ steps.nvm.outputs.NODE_VERSION }}
